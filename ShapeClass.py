from brian2 import *
import matplotlib.pyplot as pyplot
import numpy as np

class shapeclass:
	def __init__(self,sense_size=None):
		self.sense_size = sense_size if sense_size is not None else 6

	def filtersynapse(self):
		kernel_vert = np.array([[0,1,0],[0,1,0],[0,1,0]])
		kernel_horiz = np.array([[0,0,0],[1,1,1],[0,0,0]])
		kernel_updiag = np.array([[0,0,1],[0,1,0],[1,0,0]])
		kernel_downdiag = np.identity(3).astype(int)

		filter_vert = self.convolve(kernel_vert)
		filter_horiz = self.convolve(kernel_horiz)
		filter_updiag = self.convolve(kernel_updiag)
		filter_downdiag = self.convolve(kernel_downdiag)
		return [filter_vert,filter_horiz,filter_updiag,filter_downdiag]

	# Convolves any odd-lengthed square kernel over a square image of any size
	def convolve(self,kernel):
		e = self.sense_size
		f = len(kernel)
		adjustment = (np.tile(np.arange(f)-int(f/2),(f,1)).T+6*(np.arange(f)-int(f/2))).T*kernel
		# cuts bounds on matrix
		conv = np.resize(np.arange(e**2),[e,e])[int(f/2):e-int(f/2),int(f/2):e-int(f/2)]
		conv = np.resize(conv,[conv.size,1])
		return conv+np.unique(adjustment)

	def simpleshapes(self):
		mytri= np.array([[0,0,0, 0,0,0, 0,0,1, 1,0,0, 0,0,0, 0,0,0],
			[0,0,0, 0,0,0, 0,1,0, 0,1,0, 0,0,0, 0,0,0],
			[0,0,0, 0,0,0, 0,1,0, 0,1,0, 0,0,0, 0,0,0],
			[0,0,0, 0,0,0, 1,0,0, 0,0,1, 0,0,0, 0,0,0],
			[0,0,0, 0,0,0, 1,0,0, 0,0,1, 0,0,0, 0,0,0],
			[0,0,0, 0,0,1, 0,0,0, 0,0,0, 1,0,0, 0,0,0],
			[0,0,0, 0,0,1, 0,0,0, 0,0,0, 1,0,0, 0,0,0],
			[0,0,0, 0,1,0, 0,0,0, 0,0,0, 0,1,0, 0,0,0],
			[0,0,0, 0,1,0, 0,0,0, 0,0,0, 0,1,0, 0,0,0],
			[0,0,0, 1,0,0, 0,0,0, 0,0,0, 0,0,1, 0,0,0],
			[0,0,0, 1,0,0, 0,0,0, 0,0,0, 0,0,1, 0,0,0],
			[0,0,1, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 1,0,0],
			[0,0,1, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 1,0,0],
			[0,1,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,1,0],
			[0,1,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,1,0],
			[1,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1],
			[1,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1],    
			[1,1,1, 1,1,1, 1,1,1, 1,1,1, 1,1,1, 1,1,1]])

		mysqu= np.array([[1,1,1, 1,1,1, 1,1,1, 1,1,1, 1,1,1, 1,1,1],
        	[1,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1],
        	[1,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1],
        	[1,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1],
        	[1,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1],
        	[1,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1],
        	[1,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1],
        	[1,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1],
        	[1,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1],
        	[1,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1],
        	[1,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1],
        	[1,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1],
        	[1,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1],
        	[1,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1],
        	[1,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1],
        	[1,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1],
        	[1,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1],
        	[1,1,1, 1,1,1, 1,1,1, 1,1,1, 1,1,1, 1,1,1]])

		mycir= np.array([[0,0,0, 0,0,0, 0,1,1, 1,1,0, 0,0,0, 0,0,0],
			[0,0,0, 0,1,1, 1,0,0, 0,0,1, 1,1,0, 0,0,0],
			[0,0,0, 1,1,0, 0,0,0, 0,0,0, 0,1,1, 0,0,0],
			[0,0,1, 1,0,0, 0,0,0, 0,0,0, 0,0,1, 1,0,0],
			[0,1,1, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 1,1,0],
			[0,1,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,1,0],
			[0,1,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,1,0],
			[1,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1],
			[1,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1],
			[1,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1],
			[1,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,0,1],
			[0,1,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,1,0],
			[0,1,0, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 0,1,0],
			[0,1,1, 0,0,0, 0,0,0, 0,0,0, 0,0,0, 1,1,0],
			[0,0,1, 1,0,0, 0,0,0, 0,0,0, 0,0,1, 1,0,0],
			[0,0,0, 1,1,0, 0,0,0, 0,0,0, 0,1,1, 0,0,0],
			[0,0,0, 0,1,1, 1,0,0, 0,0,1, 1,1,0, 0,0,0],
			[0,0,0, 0,0,0, 0,1,1, 1,1,0, 0,0,0, 0,0,0]])
		return [mytri,mysqu,mycir]
		







